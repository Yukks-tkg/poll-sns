import SwiftUI

// MARK: - Models

enum Gender: String, CaseIterable, Identifiable {
    case male, female, other   // ‚òÖ DB„Å´ÈÄÅ„Çã„Ç≥„Éº„ÉâÂÄ§ÔºàËã±Ë™ûÔºâ
    var id: String { rawValue }
    var display: String {      // ‚òÖ UIË°®Á§∫Áî®ÔºàÊó•Êú¨Ë™ûÔºâ
        switch self {
        case .male: return "Áî∑ÊÄß"
        case .female: return "Â•≥ÊÄß"
        case .other: return "„Åù„ÅÆ‰ªñ"
        }
    }
}

enum Occupation: String, CaseIterable, Identifiable {
    case student = "Â≠¶Áîü"
    case companyEmployee = "‰ºöÁ§æÂì°"
    case selfEmployedFreelance = "ÂÄã‰∫∫‰∫ãÊ•≠„Éª„Éï„É™„Éº„É©„É≥„Çπ"
    case partTime = "„Éë„Éº„Éà„Éª„Ç¢„É´„Éê„Ç§„Éà"
    case homemaker = "Â∞ÇÊ•≠‰∏ªÂ©¶Ôºè‰∏ªÂ§´"
    case unemployed = "ÁÑ°ËÅ∑"
    case other = "„Åù„ÅÆ‰ªñ"
    var id: String { rawValue }
}

// MARK: - Helpers

private extension String {
    /// ÁµµÊñáÂ≠ó„ÇíÂê´„ÇÄ„Åã„Å©„ÅÜ„ÅãÔºàÁ∞°ÊòìÂà§ÂÆöÔºâ
    var containsEmoji: Bool {
        return unicodeScalars.contains { $0.properties.isEmoji && ($0.value > 0x238C) }
    }
}

/// „Éê„É™„Éá„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö
struct ProfileValidation {
    static let nicknameMin = 1
    static let nicknameMax = 20
    static func validateNickname(_ text: String) -> String? {
        let trimmed = text.trimmingCharacters(in: .whitespacesAndNewlines)
        if trimmed.isEmpty { return "„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ" }
        if trimmed.containsEmoji { return "„Éã„ÉÉ„ÇØ„Éç„Éº„É†„Å´ÁµµÊñáÂ≠ó„ÅØ‰Ωø„Åà„Åæ„Åõ„Çì" }
        if trimmed.count < nicknameMin { return "„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅØÊúÄ‰Ωé\(nicknameMin)ÊñáÂ≠ó„Åß„Åô" }
        if trimmed.count > nicknameMax { return "„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅØÊúÄÂ§ß\(nicknameMax)ÊñáÂ≠ó„Åß„Åô" }
        return nil
    }
}

// MARK: - Occupation (UI display ‚Üî code)
struct OccupationItem { let code: String; let label: String }
private let occupationItems: [OccupationItem] = [
    .init(code: "student",            label: "Â≠¶Áîü"),
    .init(code: "employee_fulltime",  label: "‰ºöÁ§æÂì°ÔºàÊ≠£Á§æÂì°Ôºâ"),
    .init(code: "employee_contract",  label: "‰ºöÁ§æÂì°ÔºàÂ•ëÁ¥Ñ„ÉªÊ¥æÈÅ£Ôºâ"),
    .init(code: "part_time",          label: "„Éë„Éº„Éà„Éª„Ç¢„É´„Éê„Ç§„Éà"),
    .init(code: "freelancer",         label: "„Éï„É™„Éº„É©„É≥„Çπ"),
    .init(code: "self_employed",      label: "Ëá™Âñ∂Ê•≠"),
    .init(code: "public_servant",     label: "ÂÖ¨ÂãôÂì°"),
    .init(code: "homemaker",          label: "Â∞ÇÊ•≠‰∏ªÂ©¶Ôºè‰∏ªÂ§´"),
    .init(code: "unemployed",         label: "ÁÑ°ËÅ∑"),
    .init(code: "other",              label: "„Åù„ÅÆ‰ªñ"),
    .init(code: "prefer_not_to_say",  label: "ÂõûÁ≠î„Åó„Å™„ÅÑ")
]

// MARK: - View

struct ProfileEditView: View {
    let userID: UUID
    let initialProfile: PollAPI.UserProfile?
    var onSaved: (() -> Void)? = nil

    // ÂÖ•ÂäõÁä∂ÊÖã
    @State private var selectedAvatar: String = "üë∂"
    @State private var nickname: String = ""
    @State private var gender: Gender = .other
    @State private var age: Int = 20
    @State private var didPreload = false

    // ÁîªÈù¢Âà∂Âæ°
    @Environment(\.dismiss) private var dismiss

    private let avatarCandidates: [String] = [
        // Animals
        "üê∂","üê±","üêº","ü¶ä","üêª","ü¶Å","üêµ","üêß","üê∏","ü¶Ñ",
        // Foods
        "üçî","üç£","üçï","üçé","üç©","üçú","üç´","‚òïÔ∏è",
        // Faces (ÊåáÂÆö„ÅÆ3Á®ÆÂê´„ÇÄ)
        "üë∂","üëß","üßí"
    ]

    private var nicknameError: String? {
        ProfileValidation.validateNickname(nickname)
    }

    private var canSave: Bool {
        nicknameError == nil && age >= 13 && age <= 99
    }

    var body: some View {
        Form {
            Section(header: Text("„Ç¢„Ç§„Ç≥„É≥")) {
                VStack(alignment: .leading, spacing: 12) {
                    Text("ÈÅ∏Êäû‰∏≠: \(selectedAvatar)")
                        .font(.title)
                    LazyVGrid(columns: Array(repeating: GridItem(.flexible(minimum: 32, maximum: 60), spacing: 8), count: 6), spacing: 8) {
                        ForEach(avatarCandidates, id: \.self) { emoji in
                            Button {
                                selectedAvatar = emoji
                            } label: {
                                ZStack {
                                    RoundedRectangle(cornerRadius: 8)
                                        .stroke(selectedAvatar == emoji ? Color.accentColor : Color.secondary.opacity(0.3), lineWidth: selectedAvatar == emoji ? 2 : 1)
                                        .frame(height: 44)
                                    Text(emoji).font(.title2)
                                }
                            }
                            .buttonStyle(.plain)
                        }
                    }
                }
            }

            Section(header: Text("„Éã„ÉÉ„ÇØ„Éç„Éº„É†"), footer: nicknameFooter) {
                TextField("1„Äú20ÊñáÂ≠óÔºàÁµµÊñáÂ≠ó„ÅØ‰∏çÂèØÔºâ", text: $nickname)
                    .textInputAutocapitalization(.none)
                    .autocorrectionDisabled(true)
            }

            Section(header: Text("ÊÄßÂà•")) {
                Picker("ÊÄßÂà•", selection: $gender) {
                    ForEach(Gender.allCases) { g in
                        Text(g.display).tag(g)
                    }
                }
                .pickerStyle(.segmented)
            }

            Section(header: Text("Âπ¥ÈΩ¢")) {
                Picker("Âπ¥ÈΩ¢", selection: $age) {
                    ForEach(13...99, id: \.self) { v in
                        Text("\(v)Ê≠≥").tag(v)
                    }
                }
            }
        }
        .navigationTitle("„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ")
        .navigationBarBackButtonHidden(true)
        .toolbar {
            ToolbarItem(placement: .cancellationAction) {
                Button("„Ç≠„É£„É≥„Çª„É´") { dismiss() }
            }
            ToolbarItem(placement: .confirmationAction) {
                Button("‰øùÂ≠ò") { save() }
                    .disabled(!canSave)
            }
        }
        .task {
            if !didPreload {
                await preload()
                didPreload = true
            }
        }
    }

    @ViewBuilder
    private var nicknameFooter: some View {
        let length = nickname.count
        HStack {
            if let err = nicknameError { Text(err).foregroundColor(.red) }
            Spacer()
            Text("\(length)/\(ProfileValidation.nicknameMax)")
                .foregroundColor(length > ProfileValidation.nicknameMax ? .red : .secondary)
        }
        .font(.footnote)
    }

    private func save() {
        let input = PollAPI.ProfileInput(
            display_name: nickname,
            gender: gender.rawValue,
            age: age,
            prefecture: nil,
            occupation: nil,
            icon_emoji: selectedAvatar
        )
        Task {
            do {
                _ = try await PollAPI.upsertProfile(userID: userID, input: input)
                onSaved?()
                dismiss()
            } catch {
                print("Failed to save profile:", error)
            }
        }
    }

    private func preload() async {
        // 1) Use initialProfile if provided (faster)
        if let p = initialProfile {
            await MainActor.run { apply(profile: p) }
            return
        }
        // 2) Otherwise fetch from server once
        do {
            if let p = try await PollAPI.fetchProfile(userID: userID) {
                await MainActor.run { apply(profile: p) }
            }
        } catch {
            print("EDIT preload error:", error)
        }
    }

    private func apply(profile p: PollAPI.UserProfile) {
        if let emoji = p.avatar_value, !emoji.isEmpty { selectedAvatar = emoji }
        nickname = p.username
        if let a = p.age { age = a }
        if let g = p.gender, let choice = Gender(rawValue: g) { gender = choice } else { gender = .other }
    }
}

// MARK: - Preview
#Preview {
    NavigationStack {
        ProfileEditView(userID: UUID(), initialProfile: nil)
    }
}
